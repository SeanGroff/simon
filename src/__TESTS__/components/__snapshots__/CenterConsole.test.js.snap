// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.div>
    <styled.div>
        <styled.span>
            simon
        </styled.span>
    </styled.div>
    <styled.div>
        <styled.div>
            <styled.span>
                <styled.label
                    hasPadding={true}
                >
                    count
                </styled.label>
                <Counter
                    count={0}
                    on={false}
                />
            </styled.span>
            <styled.span>
                <styled.label
                    hasPadding={true}
                >
                    start
                </styled.label>
                <StartStrictButton
                    startButton={true}
                />
            </styled.span>
            <styled.span>
                <styled.label
                    hasPadding={true}
                >
                    strict
                </styled.label>
                <StartStrictButton
                    startButton={false}
                />
            </styled.span>
        </styled.div>
        <styled.div>
            <styled.label
                hasMargin={true}
            >
                off
            </styled.label>
            <OnOffSwitch
                powerOnOff={undefined}
            />
            <styled.label
                hasMargin={true}
            >
                on
            </styled.label>
        </styled.div>
    </styled.div>
</styled.div>,
  "nodes": Array [
    <styled.div>
      <styled.div>
            <styled.span>
                  simon
            </styled.span>
      </styled.div>
      <styled.div>
            <styled.div>
                  <styled.span>
                        <styled.label
                              hasPadding={true}
                        >
                              count
                        </styled.label>
                        <Counter
                              count={0}
                              on={false}
                        />
                  </styled.span>
                  <styled.span>
                        <styled.label
                              hasPadding={true}
                        >
                              start
                        </styled.label>
                        <StartStrictButton
                              startButton={true}
                        />
                  </styled.span>
                  <styled.span>
                        <styled.label
                              hasPadding={true}
                        >
                              strict
                        </styled.label>
                        <StartStrictButton
                              startButton={false}
                        />
                  </styled.span>
            </styled.div>
            <styled.div>
                  <styled.label
                        hasMargin={true}
                  >
                        off
                  </styled.label>
                  <OnOffSwitch
                        powerOnOff={undefined}
                  />
                  <styled.label
                        hasMargin={true}
                  >
                        on
                  </styled.label>
            </styled.div>
      </styled.div>
</styled.div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Unknown />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.div>
          <styled.div>
                    <styled.span>
                              simon
                    </styled.span>
          </styled.div>
          <styled.div>
                    <styled.div>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  count
                                        </styled.label>
                                        <Counter
                                                  count={0}
                                                  on={false}
                                        />
                              </styled.span>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  start
                                        </styled.label>
                                        <StartStrictButton
                                                  startButton={true}
                                        />
                              </styled.span>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  strict
                                        </styled.label>
                                        <StartStrictButton
                                                  startButton={false}
                                        />
                              </styled.span>
                    </styled.div>
                    <styled.div>
                              <styled.label
                                        hasMargin={true}
                              >
                                        off
                              </styled.label>
                              <OnOffSwitch
                                        powerOnOff={undefined}
                              />
                              <styled.label
                                        hasMargin={true}
                              >
                                        on
                              </styled.label>
                    </styled.div>
          </styled.div>
</styled.div>,
        "_debugID": 2,
        "_renderedOutput": <styled.div>
          <styled.div>
                    <styled.span>
                              simon
                    </styled.span>
          </styled.div>
          <styled.div>
                    <styled.div>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  count
                                        </styled.label>
                                        <Counter
                                                  count={0}
                                                  on={false}
                                        />
                              </styled.span>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  start
                                        </styled.label>
                                        <StartStrictButton
                                                  startButton={true}
                                        />
                              </styled.span>
                              <styled.span>
                                        <styled.label
                                                  hasPadding={true}
                                        >
                                                  strict
                                        </styled.label>
                                        <StartStrictButton
                                                  startButton={false}
                                        />
                              </styled.span>
                    </styled.div>
                    <styled.div>
                              <styled.label
                                        hasMargin={true}
                              >
                                        off
                              </styled.label>
                              <OnOffSwitch
                                        powerOnOff={undefined}
                              />
                              <styled.label
                                        hasMargin={true}
                              >
                                        on
                              </styled.label>
                    </styled.div>
          </styled.div>
</styled.div>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Unknown />,
}
`;
